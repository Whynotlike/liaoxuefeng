# -*- coding: utf-8 -*-

'''
MixIn    多重继承
Python 允许多重继承，MixIn 就是一种常见的设计。
只允许单一继承（如Java）不能使用MixIn的设计。
'''

# 继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能。
# 假设我们要实现以下四种动物：
# Dog - 狗
# Bat -蝙蝠
# Parrot - 鹦鹉
# Ostrich - 鸵鸟
# 按照哺乳类和鸟类，再是按照能跑和能飞。

class Animal(object):
	pass

# 大类
class Manmal(Animal):
	pass

class Bird(Animal):
	pass

# 各种动物
class Dog(Manmal):
	pass

class Bat(Manmal):
	pass

class Ostrich(Bird):
	pass

class Parrot(Bird):
	pass

#现在需要给动物们加上Runable和Flyable的功能,先定义 类:
class Runable(object):
	def run(self):
		print('Running...')

class Flyable(object):
	def fly(self):
		print('Flying...')

# 那么对于需要相对应的功能的动物，就躲继承一个对应的类。例如：
class Dog(Manmal,Runable):
	pass

class Bat(Manmal,Flyable):
	pass

# 对于多重继承，一个子类就可以同时获得多个父类的所有功能。

# MixIn
# 在设计类的继承关系时，通常主线都是单一继承下来的。但如果需要‘混入’额外的功能
# 通过多重继承就可以实现。这种设计通常称之为 MixIn 。
# 为了更好的看出继承关系，我们把Runable和Flyable改为RunableMixIn和FlyableMixIn。
# 类似的，你还可以定义出肉食动物CarnivorousMixIn和植食动物HerbivorousMixIn。
class Dog(Manmal, RunableMixIn, CarnivorousMixIn):
	pass

# MixIn的目的就是给一个类增加多个功能，这样在设计类的时候，我们优先考虑多重继承在组合多个MixIn的功能，而不是设计多层次复杂的继承关系。

# Python自带的很多库也使用了MixIn。举个例子，Python自带了TCPServer和UDPServer这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，
# 这两种模型由ForkingMixIn和ThreadingMixIn提供。通过组合，我们就可以创造出合适的服务来。

# 比如，编写一个多进程模式的TCP服务，定义如下：

class MyTCPServer(TCPServer, ForkingMixIn):
    pass
# 编写一个多线程模式的UDP服务，定义如下：

class MyUDPServer(UDPServer, ThreadingMixIn):
    pass

# 如果你打算搞一个更先进的协程模型，可以编写一个CoroutineMixIn：

class MyTCPServer(TCPServer, CoroutineMixIn):
    pass

# 这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。

# January 10 2020 Completed